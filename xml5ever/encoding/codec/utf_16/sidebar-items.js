initSidebarItems({"constant":[["UTF_16BE_ENCODING","An instance for UTF-16 in big endian."],["UTF_16LE_ENCODING","An instance for UTF-16 in little endian."]],"struct":[["Big","An implementation type for big endian.Can be used as a type parameter to `UTF16Encoding`, `UTF16Encoder` and `UTF16Decoder`."],["Little","An implementation type for little endian.Can be used as a type parameter to `UTF16Encoding`, `UTF16Encoder` and `UTF16Decoder`."],["UTF16Decoder","A decoder for UTF-16.SpecializationThis type is specialized with endianness type `E`, which should be either `Little` (little endian) or `Big` (big endian)."],["UTF16Encoder","An encoder for UTF-16.SpecializationThis type is specialized with endianness type `E`, which should be either `Little` (little endian) or `Big` (big endian)."],["UTF16Encoding","UTF-16 (UCS Transformation Format, 16-bit).This is a Unicode encoding where one codepoint may use 2 (up to U+FFFF) or 4 bytes (up to U+10FFFF) depending on its value. It uses a \"surrogate\" mechanism to encode non-BMP codepoints, which are represented as a pair of lower surrogate and upper surrogate characters. In this effect, surrogate characters (U+D800..DFFF) cannot appear alone and cannot be included in a valid Unicode string.SpecializationThis type is specialized with endianness type `E`, which should be either `Little` (little endian) or `Big` (big endian)."]],"type":[["UTF16BEEncoding","A type for UTF-16 in big endian."],["UTF16LEEncoding","A type for UTF-16 in little endian."]]});