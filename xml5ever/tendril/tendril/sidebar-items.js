initSidebarItems({"enum":[["SubtendrilError","Errors that can occur when slicing a `Tendril`."]],"struct":[["Atomic","A marker of an atomic (and hence concurrent) tendril.This is used as the second, optional type parameter of a `Tendril`; `Tendril<F, Atomic>` thus implements both `Send` and `Sync`.This is akin to using `Arc` for reference counting."],["NonAtomic","A marker of a non-atomic tendril.This is the default for the second type parameter of a `Tendril` and so doesn't typically need to be written.This is akin to using `Rc` for reference counting."],["SendTendril","A simple wrapper to make `Tendril` `Send`.Although there is a certain subset of the operations on a `Tendril` that a `SendTendril` could reasonably implement, in order to clearly separate concerns this type is deliberately minimalist, acting as a safe encapsulation around the invariants which permit `Send`ness and behaving as an opaque object.A `SendTendril` may be produced by `Tendril.into_send()` or `SendTendril::from(tendril)`, and may be returned to a `Tendril` by `Tendril::from(self)`."],["Tendril","Compact string type for zero-copy parsing.`Tendril`s have the semantics of owned strings, but are sometimes views into shared buffers. When you mutate a `Tendril`, an owned copy is made if necessary. Further mutations occur in-place until the string becomes shared, e.g. with `clone()` or `subtendril()`.Buffer sharing is accomplished through thread-local (non-atomic) reference counting, which has very low overhead. The Rust type system will prevent you at compile time from sending a `Tendril` between threads. We plan to relax this restriction in the future; see `README.md`.Whereas `String` allocates in the heap for any non-empty string, `Tendril` can store small strings (up to 8 bytes) in-line, without a heap allocation. `Tendril` is also smaller than `String` on 64-bit platforms â€” 16 bytes versus 24.The type parameter `F` specifies the format of the tendril, for example UTF-8 text or uninterpreted bytes. The parameter will be instantiated with one of the marker types from `tendril::fmt`. See the `StrTendril` and `ByteTendril` type aliases for two examples.The type parameter `A` indicates the atomicity of the tendril; it is by default `NonAtomic`, but can be specified as `Atomic` to get a tendril which implements `Send` and `Sync` (viz. a thread-safe tendril).The maximum length of a `Tendril` is 4 GB. The library will panic if you attempt to go over the limit."]],"trait":[["Atomicity","The multithreadedness of a tendril.Exactly two types implement this trait:`Atomic`: use this in your tendril and you will have a `Send + Sync` tendril which works across threads; this is akin to `Arc`.`NonAtomic`: use this in your tendril and you will have a tendril which is neither `Send` nor `Sync` but should be a tad faster; this is akin to `Rc`.The layout of this trait is also mandated to be that of a `usize`, for it is used for reference counting."],["ReadExt","Extension trait for `io::Read`."],["SliceExt","`Tendril`-related methods for Rust slices."]],"type":[["ByteTendril","`Tendril` for storing binary data."],["StrTendril","`Tendril` for storing native Rust strings."]]});